$(document).ready(function(){

    $('#approveId').prop('disabled', true); // Disabling the Approve Button
    $('#rejectId').prop('disabled', true); // Disabling the Reject Button
    $('#holdId').prop('disabled', true); // Disabling the Hold Button
    $('#viewId').prop('disabled', true); // Disabling the View Button
    $('#sbiDevision').prop('hidden', true); // Hiding the SBI Division
    $('#editId').prop('disabled', true); // Disabling the Edit Button

    var userModulesProper = userModules.replaceAll('&#x27;', '' ).replaceAll("[", "").replaceAll("]", "").replaceAll(" ", '').split(",");

    var userModulesQuery = '';
    for(var i=0; i<userModulesProper.length; i++){

        if(i === userModulesProper.length - 1)
        {
            userModulesQuery = userModulesQuery + "'" + userModulesProper[i] + "'";
        }
        else
        {
            userModulesQuery = userModulesQuery + "'" + userModulesProper[i] + "'" + ",";
        }
        
    };

    var userModulesQueryProper = "(" + userModulesQuery + ")";

    var query = "SELECT IFNULL(TRIM(vendor_name), '') AS 'Vendor Name', IFNULL(TRIM(vendor_address), '') AS 'Vendor Address', IFNULL(TRIM(place_of_supply), '') AS 'Place Of Supply', IFNULL(TRIM(invoice_number), '') AS 'Invoice Number', IFNULL(DATE_FORMAT(invoice_date, '%d-%m-%Y'), '') AS 'Invoice Date', IFNULL(CONVERT(total_invoice_amount, CHAR), '0.00') AS 'Invoice Amount', IFNULL(TRIM(purchase_order_number), '') AS 'PO Number', IFNULL(DATE_FORMAT(purchase_order_date, '%d-%m-%Y'), '') AS 'PO Date', IFNULL(TRIM(cost_center_code), '') AS 'Cost Centre Code', IFNULL(TRIM(approver_mail_id), '') AS 'Approver', IFNULL(TRIM(expense_code), '') AS 'Expense Code', IFNULL(TRIM(expense_category), '') AS 'Expense Category', IFNULL(TRIM(invoice_type), '') AS 'Invoice Type', IFNULL(TRIM(invoice_user_mail_id), '') AS 'Sent By', IFNULL(TRIM(invoice_extraction_type), '') AS 'Invoice Extraction Type', IFNULL(TRIM(sbi_cost_center_code), '') AS 'SBI Cost Centre', IFNULL(TRIM(sbi_site_code), '') AS 'SBI Site', IFNULL(TRIM(sbi_site_name), '') AS 'SBI Site Name', IF(sbi_billable = 0, 'NO', 'YES') AS 'SBI Billable', IFNULL(TRIM(unique_number), '') AS 'Unique Number', id, IFNULL(DATE_FORMAT(due_date, '%d-%m-%Y'), '') AS 'Due Date', IFNULL(TRIM(revenue_invoice_number), '') AS 'Revenue Invoice Number', IFNULL(DATE_FORMAT(purchase_level_1_approval_date, '%d-%m-%Y %H:%i:%s'), '') AS 'Purchase Date', IFNULL(DATE_FORMAT(purchase_level_2_approval_date, '%d-%m-%Y %H:%i:%s'), '') AS 'Checker Date', IFNULL(DATE_FORMAT(approver_approval_date, '%d-%m-%Y %H:%i:%s'), '') AS 'Approval Date', purchase_order_mapped_id FROM payments.approved_invoices WHERE (is_purchase_approved = 1 OR is_purchase_level_2_approved = 1) AND is_approver_approved = 1 AND is_approver_rejected = 0 AND is_approver_hold = 0 AND is_finance_approved = 0 AND is_finance_hold = 0 AND invoice_type IN {user_dept_type} AND is_active = 1;";
    var queryProper = query.replaceAll("{user_dept_type}", userModulesQueryProper);

    console.log(queryProper);

    // Get the invoices data
    $.ajax({
        method : 'GET',
        url : 'new_invoices_finance_data/',
        data : $.param({
            "query" : queryProper,
            "object_type" : "table"
        })
    })
    .done(function(responseData){
        console.log("Value generated successfully");
        if (responseData != "null"){
            properData = JSON.parse(responseData);
            headerObjectsArray = getProperDataset(properData)[0];
            dataValuesArray = getProperDataset(properData)[1];
            createTable(headerObjectsArray, dataValuesArray);
        };
    })
    .fail(function(){
        console.log("Error Occured in generating Invoice Data");
    })
    .always(function(){
        console.log("Invoice Generating Data Completed");
    });

    // Get Proper Headers and Dataset for Table Generation
    function getProperDataset(responseData){
        var headerObjectsArray = [{title : ""}];
        var dataValuesArray = [];

        var data = responseData;
        
        var headers = data["headers"];
        var dataValues = data["data"];

        // For Headers
        for(var i=0; i<headers.length; i++){
            headerObjectsArray.push({title : headers[i]});
        };

        // For Data
        for(var j=0; j<dataValues.length; j++){
            dataValuesArray.push(Object.values(dataValues[j]))
        };

        // For to make first index as ""
        for(var k=0; k<dataValuesArray.length; k++){
            dataValuesArray[k].splice(0,0,"");
        };
        return [headerObjectsArray, dataValuesArray];
    };

    function createTable(headerObjectsArray, dataValuesArray){

        var table = $('#myTable').DataTable({
            data : dataValuesArray,
            columns : headerObjectsArray,
            "lengthChange": 'true',
            "scrollX": true,
            "scrollY": true,
            scrollY : "50vh",
            "scrollCollapse": true,
            "paging": true,
            "ordering": true,
            "pagingType": "first_last_numbers" ,
            "columnDefs" : [{
                "targets" : 0,
                "data" : null,
                "defaultContent" : "<input class='tableCheckBox' type='checkbox'>"
            },{
                "targets" : 15,
                "visible" : false
            },{
                "targets" : 21,
                "visible" : false
            },{
                "targets" : 27,
                "visible" : false
            }]
        });

        $('#myTable tbody').on('click', 'input', function(){

            var currentCheckBox = $(this).prop('checked');

            $('input').prop('checked', false);
            $(this).prop('checked', currentCheckBox);

            var id = $('#workingId').attr("value");
            getLockTransaction(id, "unlock", workingPerson);

            if(currentCheckBox){
                var data = table.row($(this).parents('tr')).data();
                var checkboxTag = $(this);

                checkTransactionLock(data, checkboxTag);

                $('#approvedInvoiceId').val(data[21]);

            }else{
                $('#approveId').prop('disabled', true); // Disabling the Approve Button
                $('#rejectId').prop('disabled', true); // Disabling the Reject Button
                $('#holdId').prop('disabled', true); // Disabling the Hold Button
                $('#viewId').prop('disabled', true); // Disabling the View Button
                $('#editId').prop('disabled', true); // Disabling the Edit Button
                
                var id = $('#workingId').attr("value");
                getLockTransaction(id, "unlock", workingPerson);
            };
        });

    };

    function checkTransactionLock(data, checkboxTag){
        var approveInvoiceId = data[21];
        var transactionLockQuery = "SELECT is_transaction_locked AS 'Status', IFNULL(TRIM(working_person), '') AS 'workingPerson' FROM payments.approved_invoices WHERE id = {approve_id};";
        var transactionLockQueryProper = transactionLockQuery.replaceAll('{approve_id}', approveInvoiceId);

        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : transactionLockQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                var properData = JSON.parse(responseData);
                var status = properData["data"][0]["Status"];
                var workingPersonTable = properData["data"][0]["workingPerson"];
                getDisplayTables(data, status, workingPersonTable, checkboxTag);
            };
        })
        .fail(function(){
            console.log("Error Occured in getting Checking Transaction Locking Status");
        })
        .always(function(){
            console.log("Checking Transaction Level Locking Completed");
        });
    };

    function getDisplayTables(data, status, workingPersonTable, checkboxTag){

        if(status == 1){
            alert("Currently "+ workingPersonTable + " is working on this transaction !!!");
            checkboxTag.prop('checked', false);
        }
        else
        {
            $('#workingId').attr("value", data[21]);
            getLockTransaction(data[21], "lock", workingPerson);


            $('#approveId').prop('disabled', false); // Enabling the Approve Button
            $('#rejectId').prop('disabled', false); // Enabling the Reject Button
            $('#holdId').prop('disabled', false); // Enabling the Hold Button
            $('#viewId').prop('disabled', false); // Enabling the View Button
            $('#editId').prop('disabled', false); // Enabling the Edit Button

            $('.invoiceNumber').attr("value", data[4]);
            $('.poNumber').attr("value", data[7]);
            $('.costCode').attr("value", data[9]);

            $('.newInvoiceApproveId').attr("value", data[21]);

            if (data[15] === "AD-HOC"){
                getAdhocDetails(data[7], data[4], data[27]); // To Show Pdf Details of Adhoc Type
            }
            else if (data[15] === "NORMAL"){
                getNormalDetails(data[7], data[4], data[27]);
            };

            destroyTable();
            destroyInstitutionalTable();

            getEntryTable(data[7], data[4], data[21]);
            getApprovedInvoiceDetails(data[7], data[4], data[21]);
            getAprrovedInvoiceLineDetails(data[7], data[4], data[21]);

            getInstitutionalTable(data[4]);

            if(data[13] === "SBI")
            {
                $('#sbiDevision').prop('hidden', false); // Unhiding the SBI Division
                $('#sbiDevisionEdit').prop('hidden', false); // Unhiding the SBI Division in Edit
                $('#costCentreAllocationsId').prop('hidden', true); // Hiding the Multiple Cost Centre Allocation Table
            }
            else if (data[13] === "ILS")
            {
                $('#revenueInvoiceNumberTag').prop('hidden', false); // unhiding the Revenue Invoice Tag
                $('#revenueInvoiceNumberTagEdit').prop('hidden', false); //Unhiding the Revenue Invoice Edit Tag
                $('#costCentreAllocationsId').prop('hidden', true); // Hiding the Multiple Cost Centre Allocation Table
            }
            else if(data[13] !== "SBI" || data[13] !== "ILS"){
                $('#sbiDevision').prop('hidden', true); // Unhiding the SBI Division
                $('#revenueInvoiceNumberTag').prop('hidden', true) // Hiding the Revenue Invoice Tag
                $('#revenueInvoiceNumberTagEdit').prop('hidden', true); //Unhiding the Revenue Invoice Edit Tag
                $('#costCentreAllocationsId').prop('hidden', false); // Unhiding the Multiple Cost Centre Allocation Table
            };
        };
    };

    // Hold Button Function
    $('#holdId').on('click', function(){
        document.querySelector('.modal-new-invoice-finance').style.display = 'flex';
    });

    // Reject Button Function
    $('#rejectId').on('click', function(){
        document.querySelector('.modal-reject-invoice-finance').style.display = 'flex';
    });

    $('.close').on('click', function(){
        document.querySelector('.modal-new-invoice-finance').style.display = 'none';
        document.querySelector('.modal-reject-invoice-finance').style.display = 'none';
    });

    $('#home_finance_id').on('click', function(){
        $('input').prop('checked', false);

        var id = $('#workingId').attr("value");
        getLockTransaction(id, "unlock", workingPerson);
    });

    $('#home_finance_iamge_id').on('click', function(){
        $('input').prop('checked', false);

        var id = $('#workingId').attr("value");
        getLockTransaction(id, "unlock", workingPerson);
    });

    $('#home_finance_logout_id').on('click', function(){
        $('input').prop('checked', false);

        var id = $('#workingId').attr("value");
        getLockTransaction(id, "unlock", workingPerson);
    });


    function getEntryTable(poNumber, invoiceNumber, approvedInvoiceId){
        var entryTableQuery = "SELECT IFNULL(TRIM(sequence), '') AS 'Sl.No', IFNULL(TRIM(description), '') AS 'Description of Service', IFNULL(TRIM(sac_code), '') AS 'SAC CODE', IFNULL(CONVERT(quantity, CHAR), '0') AS 'Quantity', IFNULL(CONVERT(rate_per_unit, CHAR), '0.00') AS 'Rate Per Unit', IFNULL(CONVERT(line_cgst_percent, CHAR), '0.00') AS 'CGST %', IFNULL(CONVERT(line_cgst_amount, CHAR), '0.00') AS 'CGST Amount', IFNULL(CONVERT(line_sgst_percent, CHAR), '0.00') AS 'SGST %', IFNULL(CONVERT(line_sgst_amount, CHAR), '0.00') AS 'SGST Amount', IFNULL(CONVERT(line_igst_percent, CHAR), '0.00') AS 'IGST %', IFNULL(CONVERT(line_igst_percent, CHAR), '0.00') AS 'IGST Amount', IFNULL(CONVERT(line_amount, CHAR), '0.00') AS 'Amount' FROM payments.approved_invoices_line WHERE approved_invoice_id = {approved_invoice_id} AND is_active = 1 ORDER BY CAST(sequence AS UNSIGNED) ASC;";
        var entryTableQueryProper = entryTableQuery.replaceAll("{po_number}", poNumber).replaceAll('{invoice_number}', invoiceNumber).replaceAll('{approved_invoice_id}', approvedInvoiceId).replaceAll('\\', '\\\\');
        // console.log(entryTableQueryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : entryTableQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                properData = JSON.parse(responseData);
                // console.log(properData);
                headerObjectsArray = getRawDataset(properData)[0];
                dataValuesArray = getRawDataset(properData)[1];
                createEntryTable(headerObjectsArray, dataValuesArray);
            };
        })
        .fail(function(){
            console.log("Error Occured in Getting Reject Data");
        })
        .always(function(){
            console.log("Reject Generating Data Completed");
        });
    };

    function getRawDataset(responseData){
        var headerObjectsArray = [];
        var dataValuesArray = [];

        var data = responseData;
       // console.log(data);
       // console.log(typeof(data));
        var headers = data["headers"];
        var dataValues = data["data"];

        // For Headers
        for(var i=0; i<headers.length; i++){
            headerObjectsArray.push({title : headers[i]});
        };

        // For Data
        for(var j=0; j<dataValues.length; j++){
            dataValuesArray.push(Object.values(dataValues[j]))
        };
        return [headerObjectsArray, dataValuesArray];
    };

    function createEntryTable(headerObjectsArray, dataValuesArray){
        var entryTable = $('#entryTable').DataTable({
            data : dataValuesArray,
            columns : headerObjectsArray,
            "lengthChange": 'true',
            "scrollX": true,
            "scrollY": true,
            scrollY : "50vh",
            "scrollCollapse": true,
            "paging": true,
            "ordering": true,
            "pagingType": "first_last_numbers"
        });
    };

    // Function Destroy entryTable
    function destroyTable(){
        var tableElement = document.getElementById('entryTable');
        if($.fn.DataTable.fnIsDataTable(tableElement)) {
            $('#entryTable').DataTable().clear().destroy();
            $("#entryTable").html("");
            console.log('datatable destroyed...');
        }
    };

    // Get the Approve Invoice Details
    function getApprovedInvoiceDetails(poNumber, invoiceNumber, approvedInvoiceId){
        var approveInvoiceQuery = "SELECT IFNULL(TRIM(vendor_name), '') AS 'Vendor Name', IFNULL(TRIM(vendor_address), '') AS 'Vendor Address', IFNULL(TRIM(place_of_supply), '') AS 'Place Of Supply', IFNULL(TRIM(invoice_number), '') AS 'Invoice Number', IFNULL(DATE_FORMAT(invoice_date, '%d-%m-%Y'), '') AS 'Invoice Date', IFNULL(TRIM(purchase_order_number), '') AS 'PO NUmber', IFNULL(DATE_FORMAT(purchase_order_date, '%d-%m-%Y'), '') AS 'PO Date', IFNULL(TRIM(vendor_gst_number), '') AS 'Vendor GST', IFNULL(TRIM(vendor_pan_number), '') AS 'Vendor PAN', IFNULL(TRIM(expense_code), '') AS 'Expense Code', IFNULL(TRIM(expense_category), '') AS 'Expense Category', IFNULL(TRIM(sbi_cost_center_code), '') AS 'SBI Cost Centre', IFNULL(TRIM(sbi_site_code), '') AS 'Site', IFNULL(TRIM(sbi_site_name), '') AS 'Site Name', IFNULL(TRIM(revenue_invoice_number), '') AS 'Revenue Invoice Number' FROM payments.approved_invoices WHERE id = {approved_invoice_id} AND is_active = 1;";
        var approveInvoiceQueryProper = approveInvoiceQuery.replaceAll('{invoice_number}', invoiceNumber).replaceAll('{po_number}', poNumber).replaceAll('{approved_invoice_id}', approvedInvoiceId).replaceAll('\\', '\\\\');
        // console.log(approveInvoiceQueryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : approveInvoiceQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                var properData = JSON.parse(responseData);
                updateApproveInvoiceDetails(properData);
            };
        })
        .fail(function(){
            console.log("Error Occured in getting Approve Invoice Details");
        })
        .always(function(){
            console.log("Approve Invoice Details Data Retriving Completed");
        });
    };

    // Updating Approve Invoice Details
    function updateApproveInvoiceDetails(properData){
        var data = properData["data"][0];
        $('.companyName').attr("value", data["Vendor Name"]);
        $('.invoiceNumber').attr("value", data["Invoice Number"]);
        $('.invoiceDate').attr("value", data["Invoice Date"]);
        $('.companyAddress').attr("value", data["Vendor Address"]);
        $('.poNumber').attr("value", data["PO NUmber"]);
        $('.poDate').attr("value", data["PO Date"]);
        $('.placeOfSupply').attr("value", data["Place Of Supply"]);
        $('.panNumber').attr("value", data["Vendor PAN"]);
        $('.gstNumber').attr("value", data["Vendor GST"]);
        $('.expenseCode').attr("value", data["Expense Code"]);
        $('.expenseCategory').attr("value", data["Expense Category"]);
        $('.sbiSiteCode').attr("value", data["Site"]);
        $('.sbiCostCentreCode').attr("value", data["SBI Cost Centre"]);
        $('.sbiSiteName').attr("value", data["Site Name"]);
        $('.revenueInvoiceNumber').attr("value", data["Revenue Invoice Number"]);
    };

    // Get the Approve Invoice Line Details
    function getAprrovedInvoiceLineDetails(poNumber, invoiceNumber, approvedInvoiceId){
        var approverLineQuery = "SELECT IFNULL(CONVERT(cgst_percent, CHAR), '0.00') AS 'cgst charges', IFNULL(CONVERT(cgst_amount, CHAR), '0.00') AS 'cgst value', IFNULL(CONVERT(sgst_percent, CHAR), '0.00') AS 'sgst charges', IFNULL(CONVERT(sgst_amount, CHAR), '0.00') AS 'sgst value', IFNULL(CONVERT(igst_percent, CHAR), '0.00') AS 'igst charges', IFNULL(CONVERT(igst_amount, CHAR), '0.00') AS 'igst value', IFNULL(CONVERT(invoice_amount, CHAR), '0.00') AS 'sub total', IFNULL(CONVERT(total_invoice_amount, CHAR), '0.00') AS 'Total Amount' FROM payments.approved_invoices WHERE id = {approved_invoice_id} AND is_active = 1;";
        var approverLineQueryProper = approverLineQuery.replaceAll('{invoice_number}', invoiceNumber).replaceAll('{po_number}', poNumber).replaceAll('{approved_invoice_id}', approvedInvoiceId).replaceAll('\\', '\\\\');
        // console.log(approverLineQueryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : approverLineQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                var properData = JSON.parse(responseData);
                updateApproveInvoiceLineDetails(properData);
            };
        })
        .fail(function(){
            console.log("Error Occured in getting Approve Invoice Line Details");
        })
        .always(function(){
            console.log("Approve Invoice Line Details Data Retriving Completed");
        });
    };

    // Updating Approve Invoice Line Details
    function updateApproveInvoiceLineDetails(properData){
        var data = properData["data"][0];
        $('.total').attr("value", data["sub total"]);
        $('.cgstPercent').attr("value", data["cgst charges"].replaceAll(".00",""));
        $('.cgstAmount').attr("value", data["cgst value"]);
        $('.sgstPercent').attr("value", data["sgst charges"].replaceAll(".00", ""));
        $('.sgstAmount').attr("value", data["sgst value"]);
        $('.igstPercent').attr("value", data["igst charges"].replaceAll(".00", ""));
        $('.igstAmount').attr("value", data["igst value"]);
        $('.totalAmount').attr("value", data["Total Amount"]);
    };

    // Get the Adhoc Details Id to display pdf files
    function getAdhocDetails(poNumber, invoiceNumber, purchaseOrderId){
        var adhocQuery = "SELECT adhoc_invoice_details_id AS id FROM payments.purchase_order_mapped WHERE id = {purchaseOrderId} AND is_active = 1;";
        var adhocQueryProper = adhocQuery.replaceAll("{po_number}", poNumber).replaceAll('{invoice_number}', invoiceNumber).replaceAll('{purchaseOrderId}', purchaseOrderId).replaceAll('\\', '\\\\');
        // console.log(adhocQueryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : adhocQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                var properData = JSON.parse(responseData);
                var adhocDetailsId = properData["data"][0]["id"];
                getPurchaseOrderFile(poNumber, adhocDetailsId)
            };
        })
        .fail(function(){
            console.log("Error Occured in getting Adhoc Invoice Details Id");
        })
        .always(function(){
            console.log("Adhoc Invoice Details ID Retriving Completed");
        });

    };

    // Get the Normal Type Invoice Approval pdf
    function getNormalDetails(poNumber, invoiceNumber, purchaseOrderId){
        var normalTypeQuery = "SELECT IFNULL(TRIM(file_1_type), '') AS 'file_1_type', IFNULL(TRIM(file_1_path), '') AS 'file_1_path', IFNULL(TRIM(file_2_type), '') AS 'file_2_type', IFNULL(TRIM(file_2_path), '') AS 'file_2_path', IFNULL(TRIM(file_3_type), '') AS 'file_3_type', IFNULL(TRIM(file_3_path), '') AS 'file_3_path', IFNULL(TRIM(file_4_type), '') AS 'file_4_type', IFNULL(TRIM(file_4_path), '') AS 'file_4_path', IFNULL(TRIM(file_5_type), '') AS 'file_5_type', IFNULL(TRIM(file_5_path), '') AS 'file_5_path', IFNULL(TRIM(file_6_type), '') AS 'file_6_type', IFNULL(TRIM(file_6_path), '') AS 'file_6_path', IFNULL(TRIM(file_7_type), '') AS 'file_7_type', IFNULL(TRIM(file_7_path), '') AS 'file_7_path', IFNULL(TRIM(file_8_type), '') AS 'file_8_type', IFNULL(TRIM(file_8_path), '') AS 'file_8_path', IFNULL(TRIM(file_9_type), '') AS 'file_9_type', IFNULL(TRIM(file_9_path), '') AS 'file_9_path', IFNULL(TRIM(file_10_type), '') AS 'file_10_type', IFNULL(TRIM(file_10_path), '') AS 'file_10_path' FROM payments.invoice_details WHERE id = {purchaseOrderId} AND is_active = 1;";
        var normalTypeQueryProper = normalTypeQuery.replaceAll("{po_number}", poNumber).replaceAll("{invoice_number}", invoiceNumber).replaceAll('{purchaseOrderId}', purchaseOrderId).replaceAll('\\', '\\\\');
        // console.log(normalTypeQueryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : normalTypeQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                var properData = JSON.parse(responseData);
                fileDataRequired = getFileDataRequired(properData);
                createFileTags(fileDataRequired);
            };
        })
        .fail(function(){
            console.log("Error Occured in getting Normal Type Data");
        })
        .always(function(){
            console.log("Normal Type Details Retriving Completed");
        });

    };

    // Destroy the Cost Center Details Table
    function destroyInstitutionalTable(){
        var tableElement = document.getElementById('institutionalTable');
        if($.fn.DataTable.fnIsDataTable(tableElement)) {
            $('#institutionalTable').DataTable().clear().destroy();
            $("#institutionalTable").html("");
            console.log('datatable destroyed...');
        }
    };

    // Get Institutional Table
    function getInstitutionalTable(invoiceNumber){
        var invoiceNumberProper = invoiceNumber.replaceAll('\'', '\'\'');
        var institutionalQuery = "SELECT (@row_num := @row_num + 1) AS 'Sl.No', IFNULL(DATE_FORMAT(reference_date_time_1, '%d-%m-%Y'), '') AS 'Admin Process Date', IFNULL(TRIM(reference_text_2), '') AS 'Bill No', IFNULL(DATE_FORMAT(reference_date_time_2, '%d-%m-%Y'), '') AS 'Bill Date', IFNULL(TRIM(reference_text_3), '') AS 'Vendor Name', IFNULL(TRIM(reference_text_4), '') AS 'Direct No', IFNULL(TRIM(reference_text_5), '') AS 'Employee Id', IFNULL(TRIM(reference_text_6), '') AS 'Employee Name', IFNULL(TRIM(reference_text_7), '') AS 'Description', IFNULL(TRIM(reference_text_8), '') AS 'GL Code', IFNULL(TRIM(reference_text_9), '') AS 'Cost Centre Code', IFNULL(CONVERT(amount_1, CHAR), '0.00') AS 'Net Value', IFNULL(CONVERT(amount_2, CHAR), '0.00') AS 'Transaction Fees', IFNULL(CONVERT(amount_3, CHAR), '0.00') AS 'IGST Amount', IFNULL(CONVERT(amount_4, CHAR), '0.00') AS 'CGST Amount', IFNULL(CONVERT(amount_5, CHAR), '0.00') AS 'SGST Amount', IFNULL(CONVERT(amount_6, CHAR), '0.00') AS 'Total' FROM payments.institutional_invoices, (SELECT @row_num := 0) AS t WHERE reference_text_2 = '{invoice_number}' AND is_active = 1 AND processing_status = 'Processed';";
        var institutionalQueryProper = institutionalQuery.replaceAll("{invoice_number}", invoiceNumberProper).replaceAll('\\', '\\\\');
        // console.log(institutionalQueryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : institutionalQueryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                var properData = JSON.parse(responseData);
                headerObjectsArray1 = getRawDataset(properData)[0];
                dataValuesArray1 = getRawDataset(properData)[1];
                createInstitutionalTable(headerObjectsArray1, dataValuesArray1);
            };
        })
        .fail(function(){
            console.log("Error Occured in getting Approve Invoice Line Details");
        })
        .always(function(){
            console.log("Approve Invoice Line Details Data Retriving Completed");
        });
    };

    // Creating Institutional Table
    function createInstitutionalTable(headerObjectsArray1, dataValuesArray1){
        var table = $('#institutionalTable').DataTable({
            data : dataValuesArray1,
            columns : headerObjectsArray1,
            "lengthChange": 'true',
            "scrollX": true,
            "scrollY": true,
            scrollY : "30vh",
            "scrollCollapse": true,
            "paging": true,
            "ordering": true,
            "pagingType": "first_last_numbers",
            dom: 'Bfrtip',
            buttons: [
                'copyHtml5',
                'excelHtml5',
                'csvHtml5',
                {
                    extend : 'pdfHtml5',
                    title : function() {
                        return "approved_invoices";
                    },
                    orientation : 'landscape',
                    pageSize : 'A3',
                    text : 'PDF',
                    titleAttr : 'PDF'
                } 
            ],
            initComplete: function () {
                var btns = $('.dt-button');
                btns.addClass('btn btn-success btn-sm buttonExport');
                btns.removeClass('dt-button');
            }
        });
    };

    function getPurchaseOrderFile(poNumber, adhocInvoiceId){
        poNumberProper = poNumber.replaceAll('\'', '\'\'');
        var query = "SELECT IFNULL(TRIM(file_1_type), '') AS 'file_1_type', IFNULL(TRIM(file_1_path), '') AS 'file_1_path', IFNULL(TRIM(file_2_type), '') AS 'file_2_type', IFNULL(TRIM(file_2_path), '') AS 'file_2_path', IFNULL(TRIM(file_3_type), '') AS 'file_3_type', IFNULL(TRIM(file_3_path), '') AS 'file_3_path', IFNULL(TRIM(file_4_type), '') AS 'file_4_type', IFNULL(TRIM(file_4_path), '') AS 'file_4_path', IFNULL(TRIM(file_5_type), '') AS 'file_5_type', IFNULL(TRIM(file_5_path), '') AS 'file_5_path', IFNULL(TRIM(file_6_type), '') AS 'file_6_type', IFNULL(TRIM(file_6_path), '') AS 'file_6_path', IFNULL(TRIM(file_7_type), '') AS 'file_7_type', IFNULL(TRIM(file_7_path), '') AS 'file_7_path', IFNULL(TRIM(file_8_type), '') AS 'file_8_type', IFNULL(TRIM(file_8_path), '') AS 'file_8_path', IFNULL(TRIM(file_9_type), '') AS 'file_9_type', IFNULL(TRIM(file_9_path), '') AS 'file_9_path', IFNULL(TRIM(file_10_type), '') AS 'file_10_type', IFNULL(TRIM(file_10_path), '') AS 'file_10_path' FROM payments.adhoc_invoice_details WHERE TRIM(purchase_order_number) = {po_number} AND id = {po_number_id} AND is_active = 1;";
        var queryProper = query.replaceAll("{po_number}", "'"+poNumberProper+"'").replaceAll("{po_number_id}", adhocInvoiceId).replaceAll('\\', '\\\\');
        
        // console.log(queryProper);
        $.ajax({
            method : 'GET',
            url : 'new_invoices_finance_data/',
            data : $.param({
                "query" : queryProper,
                "object_type" : "table"
            })
        })
        .done(function(responseData){
            // console.log(response_data);
            console.log("Value generated successfully");
            if (responseData != "null"){
                properData = JSON.parse(responseData);
                // console.log(properData);
                fileDataRequired = getFileDataRequired(properData);
                createFileTags(fileDataRequired);
                createFileTagsEdit(fileDataRequired);
                // console.log(fileDataRequired);
            };
        })
        .fail(function(){
            console.log("Error Occured in getting File Path for Approved Invoice Data");
        })
        .always(function(){
            console.log("Approved Invoice Data Retriving Completed");
        });
    };

    function getFileDataRequired(responseData){
        var dataValues = responseData["data"][0];
        requiredFileData = {};

        for (key in dataValues)
        {
            if (key == "file_1_type")
            {
                file_1_type_value = dataValues[key];
                if (file_1_type_value.length > 0)
                {
                    file_1_type_path = dataValues["file_1_path"];
                    requiredFileData["file_1"] = {
                        "type" : file_1_type_value,
                        "path" : file_1_type_path
                    };
                };
            }
            else if (key == "file_2_type")
            {
                file_2_type_value = dataValues[key];
                if (file_2_type_value.length > 0)
                {
                    file_2_type_path = dataValues["file_2_path"];
                    requiredFileData["file_2"] = {
                        "type" : file_2_type_value,
                        "path" : file_2_type_path
                    };
                };
            }
            else if (key == "file_3_type")
            {
                file_3_type_value = dataValues[key];
                if (file_3_type_value.length > 0)
                {
                    file_3_type_path = dataValues["file_3_path"];
                    requiredFileData["file_3"] = {
                        "type" : file_3_type_value,
                        "path" : file_3_type_path
                    };
                };
            }
            else if (key == "file_4_type")
            {
                file_4_type_value = dataValues[key];
                if (file_4_type_value.length > 0)
                {
                    file_4_type_path = dataValues["file_4_path"];
                    requiredFileData["file_4"] = {
                        "type" : file_4_type_value,
                        "path" : file_4_type_path
                    };
                };
            }
            else if (key == "file_5_type")
            {
                file_5_type_value = dataValues[key];
                if (file_5_type_value.length > 0)
                {
                    file_5_type_path = dataValues["file_5_path"];
                    requiredFileData["file_5"] = {
                        "type" : file_5_type_value,
                        "path" : file_5_type_path
                    };
                };
            }
            else if (key == "file_6_type")
            {
                file_6_type_value = dataValues[key];
                if (file_6_type_value.length > 0)
                {
                    file_6_type_path = dataValues["file_6_path"];
                    requiredFileData["file_6"] = {
                        "type" : file_6_type_value,
                        "path" : file_6_type_path
                    };
                };
            }
            else if (key == "file_7_type")
            {
                file_7_type_value = dataValues[key];
                if (file_7_type_value.length > 0)
                {
                    file_7_type_path = dataValues["file_7_path"];
                    requiredFileData["file_7"] = {
                        "type" : file_7_type_value,
                        "path" : file_7_type_path
                    };
                };
            }
            else if (key == "file_8_type")
            {
                file_8_type_value = dataValues[key];
                if (file_8_type_value.length > 0)
                {
                    file_8_type_path = dataValues["file_8_path"];
                    requiredFileData["file_8"] = {
                        "type" : file_8_type_value,
                        "path" : file_8_type_path
                    };
                };
            }
            else if (key == "file_9_type")
            {
                file_9_type_value = dataValues[key];
                if (file_9_type_value.length > 0)
                {
                    file_9_type_path = dataValues["file_9_path"];
                    requiredFileData["file_9"] = {
                        "type" : file_9_type_value,
                        "path" : file_9_type_path
                    };
                };
            }
            else if (key == "file_10_type")
            {
                file_10_type_value = dataValues[key];
                if (file_10_type_value.length > 0)
                {
                    file_10_type_path = dataValues["file_10_path"];
                    requiredFileData["file_10"] = {
                        "type" : file_10_type_value,
                        "path" : file_10_type_path
                    };
                };
            };
        };

        return requiredFileData;
    };  

    function createFileTags(fileDataRequired){
        var startCarouselListTag = "<ol class=\"carousel-indicators\">"
        var listCarouselTag = "<li data-target=\"#carouselExampleIndicators\" data-slide-to=\"{number}\" class=\"{carouselClass}\"></li>"
        var endCarouselListTag = "</ol>"

        var startCarouselDivTag = "<div class=\"carousel-inner\" role=\"listbox\">";
        var insideCarouselDivTag = "<div id=\"{fileTypeId}\" class=\"{carouselItem}\"> \n {fileTag} \n </div>";
        var endCarouselDivTag = "</div>";
        var pdfTag = "<embed src={pdfSource} type=\"application/pdf\" height=\"850px\" width=\"100%\">";
        var imageTag = "<img src={imageSource} alt=\"No Image Found\" width=\"710\" height=\"505\">";
        
        var fileDataRequiredLength = Object.keys(fileDataRequired).length;
        var listCarouselTagAdded = "";

        for (var i=0; i < fileDataRequiredLength; i++)
        {
            if(i == 0)
            {
                listCarouselTagreplaceAlld = listCarouselTag.replaceAll("{number}", i.toString()).replaceAll("{carouselClass}", "active");
            }
            else
            {
                listCarouselTagreplaceAlld = listCarouselTag.replaceAll("{number}", i.toString()).replaceAll("{carouselClass}", "");
            };
            listCarouselTagAdded = listCarouselTagAdded + "\n" + listCarouselTagreplaceAlld;
        };
        
        var firstFinalTag = startCarouselListTag + "\n" + listCarouselTagAdded + "\n" + endCarouselListTag

        fileDataArray = Object.values(fileDataRequired);
        // console.log(fileDataArray);
        
        var divTagAdded = "";
        for (var j=0; j < fileDataArray.length; j++)
        {
            if(j == 0)
            {
                var file = fileDataArray[j];
                var insideCarouselDivTagreplaceAlld = insideCarouselDivTag.replaceAll("{carouselItem}", "carousel-item active").replaceAll(
                    "{fileTypeId}", j.toString()
                );
                if(file["type"] == "pdf")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", pdfTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{pdfSource}", "/static/"+filePath);
                }
                else(file["type"] == "image")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", imageTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{imageSource}", "/static/"+filePath);
                };
            }
            else
            {
                var file = fileDataArray[j];
                var insideCarouselDivTagreplaceAlld = insideCarouselDivTag.replaceAll("{carouselItem}", "carousel-item").replaceAll(
                    "{fileTypeId}", j.toString()
                );
                if(file["type"] == "pdf")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", pdfTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{pdfSource}", "/static/"+filePath);
                }
                else(file["type"] == "image")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", imageTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{imageSource}", "/static/"+filePath);
                };
            };

            divTagAdded = divTagAdded + "\n" + insideCarouselDivTagreplaceAlld + "\n";
        };
        
        var secondFinalTag = startCarouselDivTag + "\n" + divTagAdded + "\n" + endCarouselDivTag;
        var totalCarouselTags = firstFinalTag + "\n" + secondFinalTag;

        // console.log(totalCarouselTags);

        $('#carouselExampleIndicators').html(totalCarouselTags);
          
    };

    function createFileTagsEdit(fileDataRequired){
        var startCarouselListTag = "<ol class=\"carousel-indicators\">"
        var listCarouselTag = "<li data-target=\"#carouselExampleIndicatorsEdit\" data-slide-to=\"{number}\" class=\"{carouselClass}\"></li>"
        var endCarouselListTag = "</ol>"

        var startCarouselDivTag = "<div class=\"carousel-inner\" role=\"listbox\">";
        var insideCarouselDivTag = "<div id=\"{fileTypeId}\" class=\"{carouselItem}\"> \n {fileTag} \n </div>";
        var endCarouselDivTag = "</div>";
        var pdfTag = "<embed src={pdfSource} type=\"application/pdf\" height=\"650px\" width=\"100%\">";
        var imageTag = "<img src={imageSource} alt=\"No Image Found\" width=\"710\" height=\"505\">";
        
        var fileDataRequiredLength = Object.keys(fileDataRequired).length;
        var listCarouselTagAdded = "";

        for (var i=0; i < fileDataRequiredLength; i++)
        {
            if(i == 0)
            {
                listCarouselTagreplaceAlld = listCarouselTag.replaceAll("{number}", i.toString()).replaceAll("{carouselClass}", "active");
            }
            else
            {
                listCarouselTagreplaceAlld = listCarouselTag.replaceAll("{number}", i.toString()).replaceAll("{carouselClass}", "");
            };
            listCarouselTagAdded = listCarouselTagAdded + "\n" + listCarouselTagreplaceAlld;
        };
        
        var firstFinalTag = startCarouselListTag + "\n" + listCarouselTagAdded + "\n" + endCarouselListTag

        fileDataArray = Object.values(fileDataRequired);
        // console.log(fileDataArray);
        
        var divTagAdded = "";
        for (var j=0; j < fileDataArray.length; j++)
        {
            if(j == 0)
            {
                var file = fileDataArray[j];
                var insideCarouselDivTagreplaceAlld = insideCarouselDivTag.replaceAll("{carouselItem}", "carousel-item active").replaceAll(
                    "{fileTypeId}", j.toString()
                );
                if(file["type"] == "pdf")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", pdfTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{pdfSource}", "/static/"+filePath);
                }
                else(file["type"] == "image")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", imageTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{imageSource}", "/static/"+filePath);
                };
            }
            else
            {
                var file = fileDataArray[j];
                var insideCarouselDivTagreplaceAlld = insideCarouselDivTag.replaceAll("{carouselItem}", "carousel-item").replaceAll(
                    "{fileTypeId}", j.toString()
                );
                if(file["type"] == "pdf")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", pdfTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{pdfSource}", "/static/"+filePath);
                }
                else(file["type"] == "image")
                {
                    var filePath = file["path"];
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{fileTag}", imageTag);
                    insideCarouselDivTagreplaceAlld = insideCarouselDivTagreplaceAlld.replaceAll("{imageSource}", "/static/"+filePath);
                };
            };

            divTagAdded = divTagAdded + "\n" + insideCarouselDivTagreplaceAlld + "\n";
        };
        
        var secondFinalTag = startCarouselDivTag + "\n" + divTagAdded + "\n" + endCarouselDivTag;
        var totalCarouselTags = firstFinalTag + "\n" + secondFinalTag;

        // console.log(totalCarouselTags);

        $('#carouselExampleIndicatorsEdit').html(totalCarouselTags);
          
    };

    $('.carousel').carousel({
        interval: false,
    });

    $('.cursorProperty').on('mouseenter', function(){
        $('#cursorDisplayId').html('<strong>' + $(this).prop("value") + '</strong>');
    });

    $('.cursorProperty').on('mouseout', function(){
        $('#cursorDisplayId').html("");
    });

    $('.cursorProperty').on('mouseenter', function(){
        $('#cursorDisplayId1').html('<strong>' + $(this).prop("value") + '</strong>');
    });

    $('.cursorProperty').on('mouseout', function(){
        $('#cursorDisplayId1').html("");
    });

    function getLockTransaction(id, state, workingPerson){
        var approveInvoiceId = id;
        var idState = state;

        $.ajax({
            method : 'GET',
            url : 'lock_new_transaction_finance/',
            data : $.param({
               "id": approveInvoiceId,
               "idState": idState,
               "workingPerson": workingPerson
            })
        })
        .done(function(responseData){
            console.log(responseData);
            if(responseData === "locked")
            {
                console.log("Transaction Locked successfully");
            }
            else if(responseData === "unlocked")
            {
                console.log("Transaction Un Locked successfully");
            };
            
        })
        .fail(function(){
            console.log("Error Occured in Locking/Unlocking Transaction");
        })
        .always(function(){
            console.log("Locking/Unlocking Transaction Completed");
        });
    };

});